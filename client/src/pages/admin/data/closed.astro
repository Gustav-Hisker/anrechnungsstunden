---
import MustAdmin from "../../../components/MustAdmin.astro";
import DefaultLayout from "../../../layouts/DefaultLayout.astro";
---

<DefaultLayout title="Halbjahresverwaltung">
    <MustAdmin />

    <h1>Abgeschlossenes Jahr</h1>

    <div id="actions">
        <a class="btn btn-wide btn-success" target="_blank" id="open_pdf"
            >PDF Ã–ffnen</a
        >
        <button class="btn btn-wide btn-success" id="send_pdfs"
            >PDFs per Email verteilen</button
        >
    </div>

    <table id="hours">
        <thead>
            <tr>
                <th>Lehrer:in</th>
                <th>Stunden</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <textarea name="out" id="out" readonly></textarea>
</DefaultLayout>

<style scoped>
    h1,
    h2,
    p {
        text-align: center;
    }

    #actions {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1rem;
    }

    textarea {
        width: calc(100% - 2rem - 8px);
        padding: 2px;
        border: 1px solid rgb(var(--border-color));
        min-height: 10rem;
        margin: 1rem;
    }
</style>

<script>
    import { pb } from "../../../pocketbase";
    import { toUpperCaseFirst } from "../../../string";
    import { toast } from "../../../toast";

    const urlParams = new URLSearchParams(window.location.search);
    const year = urlParams.get("year");
    const semester = urlParams.get("semester");

    if (!year || !semester) {
        window.location.href = "/admin/data/";
    }

    const table = document.getElementById("hours") as HTMLTableElement;
    const tbody = table.querySelector("tbody") as HTMLTableSectionElement;

    const out = document.getElementById("out") as HTMLTextAreaElement;

    const open_pdf = document.getElementById("open_pdf") as HTMLAnchorElement;
    const send_pdfs = document.getElementById("send_pdfs") as HTMLButtonElement;

    const sem = await pb
        .collection("years")
        .getFirstListItem(`start_year=${year}&&semester=${semester}`);
    const record = await pb
        .collection("results")
        .getFirstListItem(`semester="${sem.id}"`);

    async function actions() {
        if (!record) {
            return;
        }
        const token = await pb.files.getToken();
        const url = pb.files.getURL(record, record.pdf, { token });
        open_pdf.href = url;

        send_pdfs.addEventListener("click", async (e) => {
            e.preventDefault();
            send_pdfs.disabled = true;
            try {
                const res = await pb.send("/send_pdfs/", {
                    year: sem.id,
                });
            } catch (e) {
                toast("error", "Fehler beim Versenden der PDFs");
            }
            toast("success", "PDFs wurden versendet");
            send_pdfs.disabled = false;
        });
    }

    async function fillTable() {
        if (!record) {
            return;
        }

        tbody.innerHTML = "";
        for (const [teacher, hours] of Object.entries(record.data)) {
            const tr = document.createElement("tr");

            const teacher_td = document.createElement("td");
            teacher_td.textContent = toUpperCaseFirst(teacher);
            tr.appendChild(teacher_td);

            const hours_td = document.createElement("td");
            hours_td.textContent = (hours as number).toFixed(3);
            tr.appendChild(hours_td);

            tbody.appendChild(tr);
        }
    }

    async function genText() {
        if (!record) {
            console.log("No record found");
            return;
        }

        let text = "";
        for (const [i, [teacher, hours]] of Object.entries(
            record.data,
        ).entries() as any) {
            const acro = await pb
                .collection("acronyms")
                .getFirstListItem(`acronym="${teacher.toLowerCase()}"`, {
                    expand: "user",
                });

            text += `${i + 10000};;;"${acro.expand!.user.short.toUpperCase()}";"500","${hours.toFixed(3)};;;"LK";0.000;0.000;;${hours.toFixed(3)}\n`;
        }

        out.value = text;
    }

    actions();
    fillTable();
    genText();
</script>
