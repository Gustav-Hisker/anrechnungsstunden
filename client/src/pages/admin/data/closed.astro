---
import DefaultLayout from "@src/layouts/DefaultLayout.astro";
---

<DefaultLayout title="Halbjahresverwaltung">
    <div class="flex flex-col gap-4 justify-center items-center h-full w-full">
        <h1 class="text-4xl font-bold text-center">Abgeschlossenes Jahr</h1>

        <div id="actions" class="flex flex-row gap-4">
            <a class="btn w-sm btn-success" target="_blank" id="open_pdf"
                >PDF Ã–ffnen</a
            >
            <button class="btn w-sm btn-success" id="send_pdfs"
                >PDFs per Email verteilen</button
            >
        </div>

        <table id="hours" class="table table-zebra">
            <thead>
                <tr>
                    <th>Lehrer:in</th>
                    <th>Stunden</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>

        <div id="wrapper" class="grow w-full">
            <textarea name="out" id="out" class="w-full h-full" readonly
            ></textarea>
        </div>
    </div>
</DefaultLayout>

<script>
    import type {
        AcronymsResponse,
        ResultsResponse,
        UsersResponse,
    } from "@src/pocketbase-types";
    import { pb } from "@src/pocketbase";
    import { toast } from "@src/toast";
    import { Collections } from "@src/pocketbase-types";

    const urlParams = new URLSearchParams(window.location.search);
    const year = urlParams.get("year");
    const semester = urlParams.get("semester");

    if (!year || !semester) {
        window.location.href = "/admin/data/";
    }

    const table = document.getElementById("hours") as HTMLTableElement;
    const tbody = table.querySelector("tbody") as HTMLTableSectionElement;

    const out = document.getElementById("out") as HTMLTextAreaElement;

    const open_pdf = document.getElementById("open_pdf") as HTMLAnchorElement;
    const send_pdfs = document.getElementById("send_pdfs") as HTMLButtonElement;

    const sem = await pb
        .collection("years")
        .getFirstListItem(`start_year=${year}&&semester=${semester}`);
    const record = await pb
        .collection(Collections.Results)
        .getFirstListItem<
            ResultsResponse<{ [key: string]: number }>
        >(`semester="${sem.id}"`);

    out.textContent = record.untis;

    async function actions() {
        if (!record) {
            toast("error", "Keine Daten gefunden");
            return;
        }
        const token = await pb.files.getToken();
        const url = pb.files.getURL(record, record.pdf, { token });
        open_pdf.href = url;

        send_pdfs.addEventListener("click", async (e) => {
            e.preventDefault();
            send_pdfs.disabled = true;
            try {
                const res = await pb.send("/send_pdfs/", {
                    year: sem.id,
                });
            } catch (e) {
                toast("error", "Fehler beim Versenden der PDFs");
            }
            toast("success", "PDFs wurden versendet");
            send_pdfs.disabled = false;
        });
    }

    async function fillTable() {
        if (!record || !record.data) {
            toast("error", "Keine Daten gefunden");
            return;
        }

        tbody.innerHTML = "";
        for (const [teacher, hours] of Object.entries(record.data)) {
            const tr = document.createElement("tr");

            const teacher_td = document.createElement("td");
            teacher_td.textContent = teacher;
            tr.appendChild(teacher_td);

            const hours_td = document.createElement("td");
            hours_td.textContent = (hours as number).toFixed(3);
            tr.appendChild(hours_td);

            tbody.appendChild(tr);
        }
    }

    actions();
    fillTable();
</script>
