---
import MustAdmin from "@components/MustAdmin.astro";
import DefaultLayout from "@src/layouts/DefaultLayout.astro";
---

<DefaultLayout title="Halbjahresverwaltung">
    <MustAdmin />

    <h1>Halbjahresverwaltung</h1>

    <a href="/admin/data/new" class="btn btn-wide btn-success"
        >Neuen Halbjahresabschluss starten</a
    >

    <table id="years">
        <thead>
            <tr>
                <th>Schuljahr</th>
                <th>Halbjahr</th>
                <th>Status</th>
                <th>Bearbeitet</th>
                <th>Aktionen</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</DefaultLayout>

<style>
    h1,
    h2,
    p {
        text-align: center;
    }

    .btn {
        display: block;
        margin: 1rem auto;
        max-width: 50%;
        min-width: fit-content;
        text-align: center;
    }
</style>

<style is:global>
    .actions a {
        margin-right: 0.5rem;
    }
</style>

<script>
    import { pb } from "@src/pocketbase";
    import { Collections } from "@src/pocketbase-types";
    import { toast } from "@src/toast";
    import Swal from "sweetalert2";

    const years = await pb.collection("years").getFullList();

    const table = document.getElementById("years") as HTMLTableElement;
    const tbody = table.querySelector("tbody") as HTMLTableSectionElement;

    main();
    async function main() {
        tbody.innerHTML = "";
        for (const year of years) {
            const tr = document.createElement("tr");

            const yearStr = `${year.start_year}/${(year.start_year + 1).toString().substring(2)}`;
            const semesterStr =
                year.semester === 1 ? "1. Halbjahr" : "2. Halbjahr";
            const changeDate = new Date(year.updated);
            const changeStr = changeDate.toLocaleString("de-DE");

            const splitDate = new Date(year.split);
            const splitStr = splitDate.toLocaleString("de-DE", {
                year: "numeric",
                month: "2-digit",
                day: "2-digit",
            });

            let state = document.createElement("span");
            switch (year.state) {
                case "uploaded":
                    state.innerHTML = `
                        Wartet auf
                        <a href="/admin/data/new2/?year=${year.start_year}&semester=${year.semester}&split_date=${splitStr}" class="text-warning bold">nächsten Schritt</a>`;
                    state.classList.add("text-warning");
                    break;

                case "open":
                    state.innerHTML = `
                        Offen für Einsendungen.
                        <a href="/admin/data/close/?year=${year.start_year}&semester=${year.semester}" class="text-success bold">Schließen</a>`;
                    state.classList.add("text-success");
                    break;

                case "closed":
                    state.innerHTML = `Einsendungen geschlossen.
                        <a href="/admin/data/closed/?year=${year.start_year}&semester=${year.semester}" class="text-success bold">Daten ansehen</a>`;
                    state.classList.add("text-success");
                    break;

                default:
                    state.textContent = "Fehler";
                    state.classList.add("text-error");
                    break;
            }

            const delBtn = document.createElement("a");
            delBtn.href = "#";
            delBtn.textContent = "Löschen";
            const onDel = async () => {
                const res = await Swal.fire({
                    title: "Wirklch löschen?",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Ja",
                    cancelButtonText: "Nein",
                });

                if (res.isConfirmed) {
                    await pb.collection("years").delete(year.id);
                    tr.remove();
                }
            };
            delBtn.onclick = onDel;

            const uncompleteBtn = document.createElement("a");
            uncompleteBtn.href = "#";
            uncompleteBtn.textContent = "Wieder öffnen";
            const onUncomplete = async () => {
                const res = await Swal.fire({
                    title: "Wollen Sie den Halbjahresabschluss wirklich wieder öffnen?",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Ja, wieder öffnen",
                    cancelButtonText: "Nein",
                });

                if (res.isConfirmed) {
                    toast("info", "Wird geöffnet...");

                    const pdfs = await pb
                        .collection(Collections.Pdfs)
                        .getFullList({
                            filter: pb.filter("semester={:semester}", {
                                semester: year.id,
                            }),
                        });

                    const batch = pb.createBatch();
                    for (const pdf of pdfs) {
                        batch.collection(Collections.Pdfs).delete(pdf.id);
                    }

                    if (pdfs.length > 0) {
                        try {
                            await batch.send();
                        } catch (e) {
                            toast("error", "Fehler beim Öffnen");
                        }
                    }

                    try {
                        const record = await pb
                            .collection(Collections.Results)
                            .getFirstListItem(
                                pb.filter("semester={:semester}", {
                                    semester: year.id,
                                }),
                            );
                        await pb
                            .collection(Collections.Results)
                            .delete(record.id);

                        await pb.collection(Collections.Years).update(year.id, {
                            state: "open",
                        });
                    } catch (e) {
                        toast("error", "Fehler beim Öffnen");
                    }
                    toast("success", "Wieder geöffnet");
                    main();
                }
            };
            uncompleteBtn.onclick = onUncomplete;

            tr.innerHTML = `
                <td>${yearStr}</td>
                <td>${semesterStr}</td>
                <td>${state.outerHTML}</td>
                <td>${changeStr}</td>
                <td class="actions"></td>
            `;

            tr.lastElementChild?.appendChild(delBtn);
            if (year.state === "closed") {
                tr.lastElementChild?.appendChild(uncompleteBtn);
            }

            tbody.appendChild(tr);
        }
    }
</script>
