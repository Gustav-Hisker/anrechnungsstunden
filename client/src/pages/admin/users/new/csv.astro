---
import MustAdmin from "../../../../components/MustAdmin.astro";
import DefaultLayout from "../../../../layouts/DefaultLayout.astro";
---

<DefaultLayout title="Benutzerverwaltung">
    <MustAdmin />

    <h1>Benutzerverwaltung | CSV Import</h1>

    <form class="frm frm-wide" id="create-frm">
        <p>
            Importiere Benutzer aus einer CSV-Datei. Die Datei muss die Spalten <code
                >Name</code
            > und <code>E-Mail</code> enthalten und durch Kommas getrennt sein. Eine
            E-Mail Addresse muss in dem Format <code>AAA@B.CC</code> sein, wobei
            alle Teile auch länger sein können.
        </p>
        <div class="frm-group">
            <label for="csv">CSV-Datei:</label>
            <input class="inpt" type="file" id="csv" name="csv" required />
            <span id="csvMsg" class="error-message text-alert"></span>
        </div>

        <button class="btn btn-alert btn-wide" disabled type="submit"
            >CSV importieren</button
        >
    </form>
</DefaultLayout>

<style>
    h1,
    h2,
    p {
        text-align: center;
    }

    form {
        margin: 0 auto;
    }
</style>

<script>
    import { pb } from "../../../../pocketbase";

    const createFrm = document.getElementById("create-frm") as HTMLFormElement;
    const submitBtn = createFrm.querySelector("button") as HTMLButtonElement;

    const csvInpt = createFrm.querySelector("#csv") as HTMLInputElement;

    function validateEmail(email: string): boolean {
        const emailRegex = /^[^\s@]{3,}@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    function generatePassword(): string {
        const allowed =
            "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        const specialChars = "!@#$%^&*()-_=+[]{}|;:,.<>?";

        const len = 16;
        let pass = "";
        for (let i = 0; i < len - 2; i++) {
            const randIdx = Math.floor(Math.random() * allowed.length);
            pass += allowed[randIdx];
        }
        for (let i = 0; i < 2; i++) {
            const randIdx = Math.floor(Math.random() * specialChars.length);
            pass += specialChars[randIdx];
        }

        return pass;
    }

    function submit(e: SubmitEvent) {
        e.preventDefault();

        if (!csvInpt.files) {
            alert("Keine Datei ausgewählt.");
            return;
        }

        const csv = csvInpt.files[0];
        if (!csv) {
            alert("Keine Datei ausgewählt.");
            return;
        }

        const reader = new FileReader();
        reader.onload = async function (e) {
            if (!e.target) {
                alert("Fehler beim Lesen der Datei.");
                return;
            }
            const text = e.target.result as string;
            const lines = text.trim().split("\n");

            const batch = pb.createBatch();
            for (const line of lines) {
                const parts = line.split(",");

                if (parts.length < 2) {
                    alert(
                        `Zeile hat nicht genügend von Kommas getrennte Werte.\nErwartet: "Name, E-Mail"\nTatsächlich: "${line}"`,
                    );
                    return;
                }

                const uname = parts[0].trim();
                const email = parts[1].trim();
                const short = email.split("@")[0];

                if (!validateEmail(email) || !short || short.length < 3) {
                    alert(`Zeile hat keine valide email addrese: "${email}".`);
                }

                const pwd = generatePassword() + "aA!";

                batch.collection("users").create({
                    short: short,
                    email: email,
                    name: uname,
                    password: pwd,
                    passwordConfirm: pwd,
                    verified: true,
                });
            }

            try {
                await batch.send();
                alert("Benutzer erfolgreich importiert.");
                window.location.href = "/admin/users";
            } catch (error: any) {
                alert("Fehler beim Importieren der Benutzer.");
                window.location.reload();
            }
        };

        reader.readAsText(csv);
    }

    createFrm.onsubmit = submit;

    csvInpt.onchange = function () {
        submitBtn.disabled = !csvInpt.files || csvInpt.files.length === 0;
        submitBtn.classList.toggle("btn-alert", submitBtn.disabled);
        submitBtn.classList.toggle("btn-success", !submitBtn.disabled);
    };
</script>
