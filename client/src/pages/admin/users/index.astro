---
import MustAdmin from "../../../components/MustAdmin.astro";
import DefaultLayout from "../../../layouts/DefaultLayout.astro";
---

<DefaultLayout title="Benutzerverwaltung">
    <MustAdmin />

    <h1>Benutzerverwaltung</h1>

    <hr />
    <h2>Standardnutzer</h2>
    <table id="users">
        <thead>
            <tr>
                <th>Kürzel</th>
                <th>Nachname</th>
                <th>E-Mail</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <p><a href="/admin/users/new/csv">CSV Import</a></p>
    <p><a href="/admin/users/new/user">Neuen Benutzer anlegen</a></p>

    <hr />
    <h2>Admins</h2>
    <table id="admins">
        <thead>
            <tr>
                <th>E-Mail</th>
                <th></th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <p><a href="/admin/users/new/admin">Neuen Admin anlegen</a></p>
</DefaultLayout>

<style>
    h1,
    h2,
    p {
        text-align: center;
    }
</style>

<script>
    import { impersonate, pb } from "../../../pocketbase";

    const users = await pb.collection("users").getFullList();

    const table = document.getElementById("users") as HTMLTableElement;
    const tbody = table.querySelector("tbody") as HTMLTableSectionElement;

    for (const user of users) {
        const tr = document.createElement("tr");
        tr.innerHTML = `
            <td>${user.short.toUpperCase()}</td>
            <td>${user.name}</td>
            <td>${user.email}</td>
        `;

        const impersonateRow = document.createElement("td");
        const impLink = document.createElement("a");
        impLink.href = "#";
        impLink.textContent = "Als Benutzer anmelden";
        impLink.onclick = async () => {
            const ok = await impersonate(user.id);
            if (ok) {
                window.location.href = "/";
            }
        };
        impersonateRow.appendChild(impLink);
        tr.appendChild(impersonateRow);

        const del = document.createElement("td");
        const delLink = document.createElement("a");
        delLink.href = "#";
        delLink.textContent = "Löschen";
        delLink.onclick = async () => {
            await pb.collection("users").delete(user.id);
            window.location.reload();
        };
        del.appendChild(delLink);
        tr.appendChild(del);

        tbody.appendChild(tr);
    }

    const adminUsers = await pb.collection("_superusers").getFullList();

    const adminTable = document.getElementById("admins") as HTMLTableElement;
    const adminTbody = adminTable.querySelector(
        "tbody",
    ) as HTMLTableSectionElement;

    for (const user of adminUsers) {
        const tr = document.createElement("tr");

        const email = document.createElement("td");
        email.textContent = user.email;
        tr.appendChild(email);

        if (
            pb.authStore.record?.email === user.email ||
            adminUsers.length <= 1
        ) {
            const td = document.createElement("td");
            td.textContent = "Löschen nicht möglich.";
            tr.appendChild(td);
        } else {
            const del = document.createElement("td");
            const delLink = document.createElement("a");
            delLink.href = "#";
            delLink.textContent = "Löschen";
            delLink.onclick = async () => {
                await pb.collection("_superusers").delete(user.id);
                window.location.reload();
            };
            del.appendChild(delLink);
            tr.appendChild(del);
        }

        adminTbody.appendChild(tr);
    }
</script>
